from web3 import Web3, exceptions
from eth_account import Account
from colorama import init, Fore
import time

# Inisialisasi colorama
init(autoreset=True)

# Inisialisasi koneksi ke RPC
rpc_url = 'https://rpc-testnet.unit0.dev'
chain_id = 88817
w3 = Web3(Web3.HTTPProvider(rpc_url))

# Pastikan koneksi berhasil
if not w3.isConnected():
    print(Fore.RED + "Koneksi ke RPC gagal")
    exit()

# Fungsi untuk membaca private key dari file
def read_private_key(filename='private_key.txt'):
    try:
        with open(filename, 'r') as file:
            private_key = file.read().strip()
        return private_key
    except FileNotFoundError:
        print(Fore.RED + f"File {filename} tidak ditemukan.")
        exit()

# Fungsi untuk mengirim token
def send_tokens(sender_private_key, to_address, amount, nonce, gas_price, gas_limit):
    sender_address = Account.from_key(sender_private_key).address
    amount_wei = w3.toWei(amount, 'ether')

    # Periksa saldo akun pengirim
    balance = w3.eth.getBalance(sender_address)
    total_cost = amount_wei + (gas_price * gas_limit)
    if balance < total_cost:
        raise ValueError(f'Saldo tidak mencukupi: saldo {balance}, biaya total {total_cost}')

    tx = {
        'nonce': nonce,
        'to': to_address,
        'value': amount_wei,
        'gas': gas_limit,
        'gasPrice': gas_price,
        'chainId': chain_id,
    }

    signed_tx = w3.eth.account.signTransaction(tx, sender_private_key)
    tx_hash = w3.eth.sendRawTransaction(signed_tx.rawTransaction)
    return tx_hash

# Fungsi untuk mendapatkan nonce dengan penanganan kesalahan
def get_nonce_with_retry(address, retries=5, delay=5):
    for i in range(retries):
        try:
            nonce = w3.eth.getTransactionCount(address)
            return nonce
        except exceptions.RequestsError as e:
            print(Fore.RED + "Kesalahan saat mengambil nonce:", e)
            time.sleep(delay)
        except exceptions.TimeExhausted as e:
            print(Fore.RED + "Waktu permintaan habis:", e)
            time.sleep(delay)
        except exceptions.BadFunctionCallOutput as e:
            print(Fore.RED + "Keluaran panggilan fungsi buruk:", e)
            untuk jika

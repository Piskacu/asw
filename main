from web3 import Web3
from eth_account import Account
import json
from colorama import init, Fore, Style
import time

# Inisialisasi colorama
init(autoreset=True)

# Inisialisasi koneksi ke RPC
rpc_url = 'https://rpc-testnet.unit0.dev'
chain_id = 88817
w3 = Web3(Web3.HTTPProvider(rpc_url))

# Pastikan koneksi berhasil
if not w3.is_connected():
    print(Fore.RED + "Koneksi ke RPC gagal")
    exit()

# Fungsi untuk membaca private key dari file
def read_private_key(filename='private_key.txt'):
    try:
        with open(filename, 'r') as file:
            private_key = file.read().strip()
        return private_key
    except FileNotFoundError:
        print(Fore.RED + f"File {filename} tidak ditemukan.")
        exit()

# Fungsi untuk mengirim token
def send_tokens(sender_private_key, to_address, amount, nonce, gas_price, gas_limit):
    sender_address = Account.from_key(sender_private_key).address
    amount_wei = w3.to_wei(amount, 'ether')

    # Periksa saldo akun pengirim
    balance = w3.eth.get_balance(sender_address)
    total_cost = amount_wei + (gas_price * gas_limit)
    if balance < total_cost:
        raise ValueError(f'Saldo tidak cukup: saldo {balance}, biaya total {total_cost}')

    tx = {
        'nonce': nonce,
        'to': to_address,
        'value': amount_wei,
        'gas': gas_limit,
        'gasPrice': gas_price,
        'chainId': chain_id
    }

    signed_tx = w3.eth.account.sign_transaction(tx, sender_private_key)
    tx_hash = w3.eth.send_raw_transaction(signed_tx.rawTransaction)
    return tx_hash

# Fungsi untuk mendapatkan nonce dengan penanganan kesalahan
def get_nonce_with_retry(address, retries=5, delay=5):
    for i in range(retries):
        try:
            nonce = w3.eth.get_transaction_count(address)
            return nonce
        except requests.exceptions.HTTPError as e:
            if e.response.status_code == 503:
                print(Fore.RED + "Layanan RPC tidak tersedia. Mencoba lagi...")
                time.sleep(delay)
            else:
                raise
    print(Fore.RED + "Gagal mendapatkan nonce setelah beberapa percobaan.")
    exit()

# Fungsi untuk mengirim transaksi dengan mekanisme penggantian gas yang lebih tinggi jika diperlukan
def send_transaction_with_replacement(sender_private_key, to_address, amount, gas_price, gas_limit):
    sender_address = Account.from_key(sender_private_key).address

    # Ambil nonce dengan penanganan kesalahan
    nonce = get_nonce_with_retry(sender_address)

    while True:
        try:
            # Kirim transaksi
            tx_hash = send_tokens(sender_private_key, to_address, amount, nonce, gas_price, gas_limit)
            print(Fore.GREEN + f'Transaksi berhasil dikirim ke {to_address} dengan hash: {tx_hash.hex()}')
            return tx_hash
        except ValueError as e:
            print(Fore.RED + f'Error: {e}')
            if 'Nonce too low' in str(e) or 'Known transaction' in str(e):
                nonce = get_nonce_with_retry(sender_address)
            elif 'Replacement transaction underpriced' in str(e):
                # Jika transaksi underpriced, naikkan gas price sebesar 10% dari harga sebelumnya
                gas_price = int(gas_price * 1.1)
                print(Fore.YELLOW + f'Menaikkan gas price menjadi {gas_price}')
            else:
                break
        except Exception as e:
            print(Fore.RED + f'Transaksi gagal: {e}')
            break

    return None

# Main program
def main():
    print(Fore.MAGENTA + "===============================")
    print(Fore.CYAN + "Units Auto Send")
    print(Fore.MAGENTA + "===============================")
    print(Fore.CYAN + "Channel : https://t.me/EOCommunity")
    print(Fore.MAGENTA + "===============================\n")

    sender_private_key = read_private_key('private_key.txt')
    sender_address = Account.from_key(sender_private_key).address

    # Menampilkan saldo pengirim dalam UNIT0
    balance_wei = w3.eth.get_balance(sender_address)
    balance_unit0 = w3.from_wei(balance_wei, 'ether')
    print(Fore.CYAN + f"Alamat: {sender_address}")
    print(Fore.CYAN + f"Saldo: {balance_unit0} UNIT0\n")

    input_address = input(Fore.YELLOW + "Masukkan alamat tujuan: ").strip()
    gas_price_wei = 500  # 0.0000005 UNIT0 dalam wei
    gas_limit = 21000

    amount = float(input(Fore.YELLOW + "Masukkan jumlah token yang akan dikirim per transaksi: ").replace(',', '.'))
    num_transactions = int(input(Fore.YELLOW + "Masukkan jumlah transaksi yang ingin dikirim: ").strip())
    
    total_transactions = 0

    for _ in range(num_transactions):
        tx_hash = send_transaction_with_replacement(sender_private_key, input_address, amount, gas_price_wei, gas_limit)
        if tx_hash:
            total_transactions += 1

    print(Fore.MAGENTA + "\n===============================")
    print(Fore.YELLOW + "Pengiriman selesai!")
    print(Fore.CYAN + f"Total transaksi berhasil: {total_transactions}")
    print(Fore.CYAN + "Terima kasih telah menggunakan script ini.")
    print(Fore.CYAN + "Channel : https://t.me/EOCommunity")
    print(Fore.MAGENTA + "===============================")

if __name__ == '__main__':
    main()

from web3 import Web3
from eth_account import Account
import json
import time
from colorama import init, Fore, Style

# Inisialisasi colorama
init(autoreset=True)

# Inisialisasi koneksi ke RPC
rpc_url = 'https://rpc-testnet.unit0.dev'
chain_id = 88817
w3 = Web3(Web3.HTTPProvider(rpc_url))

# Pastikan koneksi berhasil
if not w3.is_connected():
    print(Fore.RED + "Koneksi ke RPC gagal")
    exit()

# Fungsi untuk membaca private key dari file
def read_private_key(filename='private_key.txt'):
    try:
        with open(filename, 'r') as file:
            private_key = file.read().strip()
        return private_key
    except FileNotFoundError:
        print(Fore.RED + f"File {filename} tidak ditemukan.")
        exit()

# Fungsi untuk mengirim token dengan mekanisme retry
def send_tokens_with_retry(sender_private_key, to_address, amount, gas_price_gwei, gas_limit, max_retry=3):
    sender_address = Account.from_key(sender_private_key).address
    amount_wei = w3.to_wei(amount, 'ether')
    gas_price = w3.to_wei(gas_price_gwei, 'gwei')
    nonce = w3.eth.get_transaction_count(sender_address)

    retries = 0
    while retries < max_retry:
        try:
            tx = {
                'nonce': nonce,
                'to': to_address,
                'value': amount_wei,
                'gas': gas_limit,
                'gasPrice': gas_price,
                'chainId': chain_id
            }

            signed_tx = w3.eth.account.sign_transaction(tx, sender_private_key)
            tx_hash = w3.eth.send_raw_transaction(signed_tx.rawTransaction)
            print(Fore.GREEN + f'Transaksi berhasil dikirim ke {to_address} dengan hash: {tx_hash.hex()}')
            return True, tx_hash
        except ValueError as e:
            print(Fore.RED + f'Error: {e}')
            if 'Nonce too low' in str(e) or 'Known transaction' in str(e):
                nonce = w3.eth.get_transaction_count(sender_address)
            retries += 1
            time.sleep(1)  # Menunggu 1 detik sebelum mencoba kembali
        except Exception as e:
            print(Fore.RED + f'Transaksi gagal: {e}')
            retries += 1
            time.sleep(1)  # Menunggu 1 detik sebelum mencoba kembali

    print(Fore.RED + f'Maximum retry reached, transaksi ke {to_address} gagal.')
    return False, None

# Main program
def main():
    print(Fore.MAGENTA + "===============================")
    print(Fore.CYAN + "Units Auto Send")
    print(Fore.MAGENTA + "===============================")
    print(Fore.CYAN + "Channel : t.me/UGDAirdrop")
    print(Fore.MAGENTA + "===============================\n")

    sender_private_key = read_private_key('private_key.txt')
    sender_address = Account.from_key(sender_private_key).address

    # Menampilkan saldo pengirim dalam UNIT0
    balance_wei = w3.eth.get_balance(sender_address)
    balance_unit0 = w3.from_wei(balance_wei, 'ether')
    print(Fore.CYAN + f"Alamat: {sender_address}")
    print(Fore.CYAN + f"Saldo: {balance_unit0} UNIT0\n")

    input_address = input(Fore.YELLOW + "Masukkan alamat tujuan: ").strip()
    gas_price_gwei = 0.2
    gas_limit = 21000
    amount = float(input(Fore.YELLOW + "Masukkan jumlah token yang akan dikirim: ").replace(',', '.'))

    while True:
        try:
            success, tx_hash = send_tokens_with_retry(sender_private_key, input_address, amount, gas_price_gwei, gas_limit)
            if success:
                print(Fore.GREEN + f'Transaksi berhasil dikirim ke {input_address} dengan hash: {tx_hash.hex()}')
            else:
                print(Fore.RED + 'Gagal mengirim transaksi.')
            break
        except KeyboardInterrupt:
            print(Fore.RED + '\nPengiriman dibatalkan.')
            break

    print(Fore.MAGENTA + "\n===============================")
    print(Fore.YELLOW + "Pengiriman selesai!")
    print(Fore.CYAN + "Terima kasih telah menggunakan script ini.")
    print(Fore.CYAN + "Channel : t.me/UGDAirdrop")
    print(Fore.MAGENTA + "===============================")

if __name__ == '__main__':
    main()
